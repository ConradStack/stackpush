<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack::Push</title>
    <link>/</link>
    <description>Recent content on Stack::Push</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Mar 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Retrieving genomic data in R with a call to htsget (v1.0.0)</title>
      <link>/2018/03/20/retrieving-genomic-data-in-r-with-a-call-to-htsget-v1-0-0/</link>
      <pubDate>Tue, 20 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/20/retrieving-genomic-data-in-r-with-a-call-to-htsget-v1-0-0/</guid>
      <description>Hoping to develop a better understanding of the htsget API specifiction and making API calls through the web in R, I put together this short example script.
We will make a GET request for a small slice of aligned sequence reads, following this example. The reference in the case below is the &amp;lsquo;GRCh37&amp;rsquo; Human genome assembly, and the API implementation is provided by DNAnexus.
require(httr) require(curl) require(jsonlite) require(stringr) # download a small slice of bam file by calling htsget reads/ API # submit initial query: url_str = &amp;quot;http://htsnexus.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 08 Mar 2018 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>Notes on R, bioinformatics, and scientific computing.
Some of my other public profiles: (TODO)</description>
    </item>
    
    <item>
      <title>Making the R console feel more linux-y</title>
      <link>/2018/03/08/making-the-r-console-feel-more-linux-y/</link>
      <pubDate>Thu, 08 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/03/08/making-the-r-console-feel-more-linux-y/</guid>
      <description>When I am working in R interactively, through the console, I often find myself trying to run the common linux shell commands: pwd and ls (instead of getwd() and list.files(), respectively).
While reading a nice explanation of active binding in R from Colin Fay, I realized that active binding provides a way to bring the pwd and ls commands to the R console:
# pwd - print present working directory makeActiveBinding(sym = &amp;quot;pwd&amp;quot;, fun = function(value){ getwd() }, env = .</description>
    </item>
    
  </channel>
</rss>